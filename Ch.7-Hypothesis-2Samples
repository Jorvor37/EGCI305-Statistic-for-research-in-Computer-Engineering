{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d2845d01-38dc-4325-92a8-17b79b97ec17",
   "metadata": {},
   "source": [
    "# EGCI 305: Chapter 7 (Hypothesis on 2 Samples)\n",
    "\n",
    "Outline\n",
    "> 1. [Packages](#ch7_packages)\n",
    "\n",
    "> 2. [Independent Z-test function (statmodels)](#ch7_ind_ztest_func)\n",
    ">    - [Example: math classes (1)](#ch7_ex_math_z)\n",
    "\n",
    "> 3. [Independent T-test function (statmodels)](#ch7_ind_ttest_func)\n",
    ">    - [Example: math classes (2)](#ch7_ex_math_t)\n",
    ">    - [Example: gas mileage](#ch7_ex_gas)\n",
    "\n",
    "> 4. [Paired T-test function (scipy)](#ch7_paired_ttest_func)\n",
    ">    - [Example: neck-shoulder disorder](#ch7_ex_neck)\n",
    " \n",
    "> 5. [F distribution](#ch7_f)\n",
    ">    - [Example: F and inverse](#ch7_ex_f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a564613e-f234-437f-acd0-381e074f9d4d",
   "metadata": {},
   "source": [
    "<a name=\"ch7_packages\"></a>\n",
    "\n",
    "## Packages\n",
    "> - **numpy** -- to work with array manipulation\n",
    "> - **matplotlib** -- to work with visualization (backend)\n",
    "> - **seaborn** -- to work with high-level visualization\n",
    "> - **math** -- to work with calculation such as sqrt (if not using sympy)\n",
    "> - **scipy.stats** -- to work with stat\n",
    "> - **statsmodels.stats.weightstats** -- to work with hypothesis testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84400489-2276-49b0-a621-e5244e731154",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "print(\"Numpy version =\", np.version.version)\n",
    "print(\"Seaborn version =\", sns.__version__)\n",
    "\n",
    "import math\n",
    "import scipy\n",
    "print(\"Scipy version =\", scipy.__version__)\n",
    "\n",
    "from scipy import stats\n",
    "from scipy.stats import norm            # Normal distribution\n",
    "from scipy.stats import t               # T distribution\n",
    "from scipy.stats import f               # F distribution\n",
    "\n",
    "from statsmodels.stats.weightstats import ztest           # Z-test\n",
    "from statsmodels.stats.weightstats import ttest_ind       # independent T-test\n",
    "from scipy.stats import levene                            # Levene test\n",
    "from scipy.stats import ttest_1samp                       # T-test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be333fba-2fe9-45e9-94cf-a0aea9ec3b03",
   "metadata": {},
   "source": [
    "<a name=\"ch7_ind_ztest_func\"></a>\n",
    "\n",
    "## Independent Z-test Function (statsmodels)\n",
    "- **[Manual: statmodels.stats.weightstats.ztest](https://www.statsmodels.org/dev/generated/statsmodels.stats.weightstats.ztest.html)**\n",
    "- Can use this function to do the whole testing procedure **if raw data are available**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f729239-cd4c-4e80-96cd-cee09b34172c",
   "metadata": {},
   "source": [
    "<a name=\"ch7_ex_math_z\"></a>\n",
    "\n",
    "### Example : math classes (1)\n",
    "- Hypothesis\n",
    "    >- H<sub>0</sub> : $\\mu$<sub>1</sub> - $\\mu$<sub>2</sub> = 0\n",
    "    >- H<sub>1</sub> : $\\mu$<sub>1</sub> - $\\mu$<sub>2</sub> < 0\n",
    "    >- Group 1 = online class\n",
    "    >- Group 2 = face-to-face class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4d00a88-55f0-4fe5-9c65-ace44c8d11c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.array( [67.6, 41.2, 85.3, 55.9, 82.4, 91.2, 73.5, 94.1, 64.7, 64.7,\n",
    "               70.6, 38.2, 61.8, 88.2, 70.6, 58.8, 91.2, 73.5, 82.4, 35.5,\n",
    "               94.1, 88.2, 64.7, 55.9, 88.2, 97.1, 85.3, 61.8, 79.4, 79.4] )\n",
    "\n",
    "B = np.array( [77.9, 95.3, 81.2, 74.1, 98.8, 88.2, 85.9, 92.9, 87.1, 88.2, \n",
    "               69.4, 57.6, 69.4, 67.1, 97.6, 85.9, 88.2, 91.8, 78.8, 71.8, \n",
    "               98.8, 61.2, 92.9, 90.6, 97.6, 100,  95.3, 83.5, 92.9, 89.4] )\n",
    "\n",
    "print(\"A (online)       >> sample size = %d, mean = %.2f, var = %.2f\" % \n",
    "      (A.size, A.mean(), A.var(ddof=1))\n",
    "     )\n",
    "\n",
    "print(\"B (face-to-face) >> sample size = %d, mean = %.2f, var = %.2f\" % \n",
    "      (B.size, B.mean(), B.var(ddof=1)), \"\\n\"\n",
    "     )\n",
    "\n",
    "fig = plt.figure( figsize = (7,5) ) \n",
    "ax1 = plt.subplot(221)\n",
    "sns.kdeplot(A).set_title(\"A (online)\")\n",
    "\n",
    "ax2 = plt.subplot(222)\n",
    "sns.kdeplot(B).set_title(\"B (face-to-face)\")\n",
    "\n",
    "ax3 = plt.subplot(223)\n",
    "stats.probplot(A, dist = 'norm', plot = ax3)\n",
    "ax3.set_title(\"A (online)\")\n",
    "\n",
    "ax4 = plt.subplot(224)\n",
    "stats.probplot(A, dist = 'norm', plot = ax4)\n",
    "ax4.set_title(\"B (face-to-face)\")\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1b458ed-5b6a-49d9-85d1-952a6a294975",
   "metadata": {},
   "outputs": [],
   "source": [
    "### From manual calculation\n",
    "\n",
    "zcal = -3.23\n",
    "zthreshold = -norm.ppf(1-0.05)\n",
    "pvalue = norm.cdf(-3.23)\n",
    "print(\"Z threshold = %.2f\" % zthreshold)\n",
    "print(\"P-value     = %.4f\" % pvalue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1a3b8b4-571d-4900-8ed4-4881ce321dea",
   "metadata": {},
   "outputs": [],
   "source": [
    "### From ztest function\n",
    "\n",
    "result = ztest(A, B, value = 0, alternative = 'smaller')\n",
    "print(\"Calculated Z = %.2f\" % result[0])\n",
    "print(\"P-value      = %.4f\" % result[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d4d13f7-4c34-48c2-a8b6-4d120d487449",
   "metadata": {},
   "source": [
    "<a name=\"ch7_ind_ttest_func\"></a>\n",
    "\n",
    "## Independent T-test Function (statsmodels)\n",
    "- **[Manual: statsmodels.stats.weightstats.ttest_ind](https://www.statsmodels.org/stable/generated/statsmodels.stats.weightstats.ttest_ind.html)**\n",
    "- Can use this function to do the whole testing procedure **if raw data are available**\n",
    "- Do Levene test for equality of variances first --> **[Manual: scipy.stats.levene](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.levene.html)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47a158cd-40a0-4b12-9209-92376cfb4fdf",
   "metadata": {},
   "source": [
    "<a name=\"ch7_ex_math_t\"></a>\n",
    "\n",
    "### Example : math classes (2)\n",
    "- What if we run t-test instead of z-test ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6360da1-4bb8-44a9-a6c0-8fda6ca6c754",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_vartest = levene(A, B)\n",
    "print(\"Levene statistic = %.4f\" % result_vartest.statistic)\n",
    "print(\"P-value          = %.4f\" % result_vartest.pvalue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "179ee85b-5404-4832-b1b1-d8cd59d7639f",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = ttest_ind(A, B, value = 0, alternative = 'smaller', usevar = 'unequal')\n",
    "print(\"Calculated t = %.2f\" % result[0])\n",
    "print(\"P-value      = %.4f\" % result[1])\n",
    "print(\"df           = %.2f\" % result[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7e2fa48-d696-4a97-8cb8-2178c33d84c2",
   "metadata": {},
   "source": [
    "<a name=\"ch7_ex_gas\"></a>\n",
    "\n",
    "### Example : gas mileage\n",
    "- Hypothesis\n",
    "    >- H<sub>0</sub> : $\\mu$<sub>1</sub> - $\\mu$<sub>2</sub> = 0\n",
    "    >- H<sub>1</sub> : $\\mu$<sub>1</sub> - $\\mu$<sub>2</sub> > 0\n",
    "    >- Group 1 = premium gasoline\n",
    "    >- Group 2 = regular gasoline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72e47d26-f4c1-457e-9015-8987e6db0849",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.array( [35.4, 31.7, 34.5, 35.4, 31.6, 35.3, 32.4, 36.6, 34.8, 36.0] )\n",
    "B = np.array( [29.7, 34.8, 29.6, 34.6, 32.1, 34.8, 35.4, 32.6, 34.0, 32.2] )\n",
    "\n",
    "print(\"A (premium) >> sample size = %d, mean = %.2f, var = %.2f\" % \n",
    "      (A.size, A.mean(), A.var(ddof=1))\n",
    "     )\n",
    "\n",
    "print(\"B (regular) >> sample size = %d, mean = %.2f, var = %.2f\" % \n",
    "      (B.size, B.mean(), B.var(ddof=1)), \"\\n\"\n",
    "     )\n",
    "\n",
    "fig = plt.figure( figsize = (7,5) ) \n",
    "ax1 = plt.subplot(221)\n",
    "sns.kdeplot(A).set_title(\"A (premium)\")\n",
    "\n",
    "ax2 = plt.subplot(222)\n",
    "sns.kdeplot(B).set_title(\"B (regular)\")\n",
    "\n",
    "ax3 = plt.subplot(223)\n",
    "stats.probplot(A, dist = 'norm', plot = ax3)\n",
    "ax3.set_title(\"A (premium)\")\n",
    "\n",
    "ax4 = plt.subplot(224)\n",
    "stats.probplot(A, dist = 'norm', plot = ax4)\n",
    "ax4.set_title(\"B (regular)\")\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c085cf8f-30a9-46a6-b9f2-2009bc192eee",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_vartest = levene(A, B)\n",
    "print(\"Levene statistic = %.4f\" % result_vartest.statistic)\n",
    "print(\"P-value          = %.4f\" % result_vartest.pvalue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64196789-90cc-4d74-8be1-b26b6658f734",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = ttest_ind(A, B, value = 0, alternative = 'larger', usevar = 'pooled')\n",
    "print(\"Calculated t = %.3f\" % result[0])\n",
    "print(\"P-value      = %.4f\" % result[1])\n",
    "print(\"df           = %.2f\" % result[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4a3fbc9-6302-469e-b33a-b5d45cd116b8",
   "metadata": {},
   "source": [
    "<a name=\"ch7_paired_ttest_func\"></a>\n",
    "\n",
    "## Paired T-test Function (scipy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa9d320b-9873-4637-836a-58b2a344dad8",
   "metadata": {},
   "source": [
    "<a name=\"ch7_ex_neck\"></a>\n",
    "\n",
    "### Example : neck-shoulder disorder\n",
    "- Hypothesis\n",
    "    >- H<sub>0</sub> : $\\mu$<sub>D</sub> = 0\n",
    "    >- H<sub>1</sub> : $\\mu$<sub>D</sub> $\\ne$ 0\n",
    "    >- D = time_before - time_after"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf9afade-c763-4ced-b83e-f3eb04021e40",
   "metadata": {},
   "outputs": [],
   "source": [
    "before = np.array( [81, 87, 86, 82, 90, 86, 96, 73, \n",
    "                    74, 75, 72, 80, 66, 72, 56, 82] )\n",
    "\n",
    "after  = np.array( [78, 91, 78, 78, 84, 67, 92, 70, \n",
    "                    58, 62, 70, 58, 66, 60, 65, 73] )\n",
    "\n",
    "D = before - after\n",
    "print(\"D >> sample size = %d, mean = %.2f, std = %.3f \\n\" % \n",
    "      (D.size, D.mean(), D.std(ddof=1))\n",
    "     )\n",
    "\n",
    "fig = plt.figure( figsize = (3,2) )\n",
    "stats.probplot(D, dist = 'norm', plot = plt)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efd09815-1e0e-4c5c-a39b-59818de3dce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = ttest_1samp(D, 0, alternative = 'two-sided')\n",
    "print(\"Calculated T = %.2f\" % result.statistic)\n",
    "print(\"Df           = %.0f\" % result.df)\n",
    "print(\"P-value      = %.3f\" % result.pvalue)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21c1ce11-4474-4146-a79d-b5eb7313d731",
   "metadata": {},
   "source": [
    "<a name=\"ch7_f\"></a>\n",
    "\n",
    "## F Distribution\n",
    "- **[Manual: scipy.stats.f](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f.html)**\n",
    "    > - For F<sub>(dfn)(dfd)</sub>\n",
    "    > - Default loc = 0\n",
    "    > - Default scale = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c639e2ed-892d-4df5-9799-a376307950e3",
   "metadata": {},
   "source": [
    "<a name=\"ch7_ex_f\"></a>\n",
    "\n",
    "### Example : F and inverse\n",
    "> - Q1 : F<sub>0.05,(6),(10)</sub>\n",
    "> - Q2 : F<sub>0.95,(6),(10)</sub>\n",
    "> - Q3 : F<sub>0.05,(10),(6)</sub>\n",
    "> - Q4 : F<sub>0.95,(10),(6)</sub>\n",
    "\n",
    "**Recall that subscript means RHS area**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b47ac19-357f-40e6-82c1-edd30e362326",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1 = f.ppf(1-0.05, 6, 10)\n",
    "Q2 = f.ppf(1-0.95, 6, 10)\n",
    "Q3 = f.ppf(1-0.05, 10, 6)\n",
    "Q4 = f.ppf(1-0.95, 10, 6)\n",
    "\n",
    "print(\"F (0.05, 6, 10) = %.2f --> inverse = %.2f\" % (Q1, 1/Q1) )\n",
    "print(\"F (0.95, 6, 10) = %.2f --> inverse = %.2f\" % (Q2, 1/Q2) )\n",
    "print(\"F (0.05, 10, 6) = %.2f --> inverse = %.2f\" % (Q3, 1/Q3) )\n",
    "print(\"F (0.95, 10, 6) = %.2f --> inverse = %.2f\" % (Q4, 1/Q4) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd13bd87-2b14-43ab-8734-5be80318bcb0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
