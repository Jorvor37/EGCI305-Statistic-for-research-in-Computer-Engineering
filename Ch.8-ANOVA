{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d2845d01-38dc-4325-92a8-17b79b97ec17",
   "metadata": {},
   "source": [
    "# EGCI 305: Chapter 8 (ANOVA)\n",
    "\n",
    "Outline\n",
    "> 1. [Packages](#ch8_packages)\n",
    "\n",
    "> 2. [One-way randomized ANOVA (statsmodels)](#ch8_anova_randomized)\n",
    ">    - [Example: compression strength](#ch8_ex_compression)\n",
    ">    - [Example: sulfur content](#ch8_ex_sulfur)\n",
    "\n",
    "> 3. [Studentized range (Q) distribution (scipy)](#ch8_studentized)\n",
    "> 4. [Pairwise Tukey HSD (statsmodels)](#ch8_tukey)\n",
    ">    - [Example: compression strength, post-hoc test](#ch8_ex_compression_posthoc)\n",
    ">    - [Example: sulfur content, post-hoc test](#ch8_ex_sulfur_posthoc)\n",
    "\n",
    "Functions\n",
    "> - [summarize, qqPlot](#ch8_func_summarize)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a564613e-f234-437f-acd0-381e074f9d4d",
   "metadata": {},
   "source": [
    "<a name=\"ch8_packages\"></a>\n",
    "\n",
    "## Packages\n",
    "> - **numpy** -- to work with array manipulation\n",
    "> - **matplotlib** -- to work with visualization (backend)\n",
    "> - **seaborn** -- to work with high-level visualization\n",
    "> - **math** -- to work with calculation such as sqrt (if not using sympy)\n",
    "> - **scipy.stats** -- to work with stat\n",
    "> - **statsmodels.stats.oneway** -- to work with ANOVA\n",
    "> - **statsmodels.stats.multicomp** -- to work with post-hoc test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "84400489-2276-49b0-a621-e5244e731154",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numpy version = 1.24.3\n",
      "Seaborn version = 0.12.2\n",
      "Scipy version = 1.11.1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "print(\"Numpy version =\", np.version.version)\n",
    "print(\"Seaborn version =\", sns.__version__)\n",
    "\n",
    "import math\n",
    "import scipy\n",
    "print(\"Scipy version =\", scipy.__version__)\n",
    "\n",
    "from scipy import stats\n",
    "from scipy.stats import f                                     # F distribution\n",
    "from scipy.stats import levene                                # Levene test\n",
    "from scipy.stats import studentized_range                     # Q distribution\n",
    "from statsmodels.stats.oneway     import anova_oneway         # ANOVA\n",
    "from statsmodels.stats.multicomp  import pairwise_tukeyhsd    # post-hoc test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be333fba-2fe9-45e9-94cf-a0aea9ec3b03",
   "metadata": {},
   "source": [
    "<a name=\"ch8_anova_randomized\"></a>\n",
    "\n",
    "## One-way Randomized ANOVA (statsmodels)\n",
    "- Apply Levene test for homogeniety of variances first --> **[Manual: scipy.stats.levene](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.levene.html)**\n",
    "- **[Manual: statsmodels.stats.oneway.anova_oneway](https://www.statsmodels.org/dev/generated/statsmodels.stats.oneway.anova_oneway.html)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f729239-cd4c-4e80-96cd-cee09b34172c",
   "metadata": {},
   "source": [
    "<a name=\"ch8_ex_compression\"></a>\n",
    "\n",
    "### Example : compression strength\n",
    "- Hypothesis\n",
    "    >- H<sub>0</sub> : $\\mu$<sub>i</sub> = $\\mu$<sub>j</sub> ; for all i and j\n",
    "    >- H<sub>1</sub> : $\\mu$<sub>i</sub> $\\ne$ $\\mu$<sub>j</sub> ; for some i and j\n",
    "    >- i, j = 1, 2, 3, 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b35b5b6b-ff79-49e2-83b8-af198096fca2",
   "metadata": {},
   "source": [
    "<a name=\"ch8_func_summarize\"></a>\n",
    "### Functions : summarize, qqPlot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4b4091c8-eab7-4dab-8cf8-0dfecf09bc7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def summarize(data, groupname):\n",
    "    print(groupname, \">> sample size = %d, mean = %.2f, var = %.2f\" % \n",
    "                     (data.size, data.mean(), data.var(ddof=1))\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "51d55102-13d5-4f54-b6c5-9a6abe244388",
   "metadata": {},
   "outputs": [],
   "source": [
    "def qqPlot(plotindex, data, groupname):\n",
    "    ax = plt.subplot(plotindex)\n",
    "    stats.probplot(data1, dist = 'norm', plot = ax)\n",
    "    ax.set_title(groupname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "de8456be-6af9-46d8-8f52-e82556c1fbed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "box1 >> sample size = 6, mean = 713.00, var = 2166.95\n",
      "box2 >> sample size = 6, mean = 756.93, var = 1626.95\n",
      "box3 >> sample size = 6, mean = 698.07, var = 1383.96\n",
      "box4 >> sample size = 6, mean = 562.02, var = 1589.93\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data1  = np.array( [655.5, 788.3, 734.3, 721.4, 679.1, 699.4] )\n",
    "group1 = np.full(data1.size, \"box1\")\n",
    "\n",
    "data2  = np.array( [789.2, 772.5, 786.9, 686.1, 732.1, 774.8] )\n",
    "group2 = np.full(data2.size, \"box2\")\n",
    "\n",
    "data3  = np.array( [737.1, 639.0, 696.3, 671.7, 717.2, 727.1] )\n",
    "group3 = np.full(data3.size, \"box3\")\n",
    "\n",
    "data4  = np.array( [535.1, 628.7, 542.4, 559.0, 586.9, 520.0] )\n",
    "group4 = np.full(data4.size, \"box4\")\n",
    "\n",
    "dataAll  = np.concatenate( (data1, data2, data3, data4) )\n",
    "groupAll = np.concatenate( (group1, group2, group3, group4) )\n",
    "\n",
    "###------------------------------------------------------------\n",
    "summarize(data1, \"box1\")\n",
    "summarize(data2, \"box2\")\n",
    "summarize(data3, \"box3\")\n",
    "summarize(data4, \"box4\")\n",
    "\n",
    "###------------------------------------------------------------\n",
    "fig = plt.figure( figsize = (5,4) ) \n",
    "qqPlot(221, data1, \"box1\")\n",
    "qqPlot(222, data2, \"box2\")\n",
    "qqPlot(223, data3, \"box3\")\n",
    "qqPlot(224, data4, \"box4\")\n",
    "fig.tight_layout()\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "01ee4327-c6a3-4608-80bf-049976aa40cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Levene statistic = 0.0996\n",
      "P-value          = 0.9593\n"
     ]
    }
   ],
   "source": [
    "result_vartest = levene(data1, data2, data3, data4)\n",
    "print(\"Levene statistic = %.4f\" % result_vartest.statistic)\n",
    "print(\"P-value          = %.4f\" % result_vartest.pvalue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8daff3e8-bbbd-451c-bc04-e7bf6c8b15ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculated f = 25.09\n",
      "P-value      = 0.0000\n",
      "df           = (3.0, 20.0)\n",
      "\n",
      "----- All details -----\n",
      "statistic = 25.094289367676012\n",
      "pvalue = 5.525449877817101e-07\n",
      "df = (3.0, 20.0)\n",
      "df_num = 3.0\n",
      "df_denom = 20.0\n",
      "nobs_t = 24.0\n",
      "n_groups = 4\n",
      "means = [713.         756.93333333 698.06666667 562.01666667]\n",
      "nobs = [6. 6. 6. 6.]\n",
      "vars_ = [2166.952      1626.94666667 1383.96266667 1589.93366667]\n",
      "use_var = equal\n",
      "welch_correction = True\n",
      "tuple = (25.094289367676012, 5.525449877817101e-07)\n",
      "\n",
      "----- Rejection region -----\n",
      "F threshold = 3.10\n"
     ]
    }
   ],
   "source": [
    "result = anova_oneway(dataAll, groupAll, use_var = 'equal')\n",
    "print(\"Calculated f = %.2f\" % result.statistic)\n",
    "print(\"P-value      = %.4f\" % result.pvalue)\n",
    "print(\"df           =\", result.df)\n",
    "\n",
    "print(\"\\n----- All details -----\")\n",
    "print(result)\n",
    "\n",
    "print(\"\\n----- Rejection region -----\")\n",
    "fthreshold = f.ppf(1-0.05, 3, 20)\n",
    "print(\"F threshold = %.2f\" % fthreshold)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e227e22-6ada-4161-9e23-cad3fbd8b4e8",
   "metadata": {},
   "source": [
    "<a name=\"ch8_ex_sulfur\"></a>\n",
    "\n",
    "### Example : sulfur content\n",
    "- Hypothesis\n",
    "    >- H<sub>0</sub> : $\\mu$<sub>i</sub> = $\\mu$<sub>j</sub> ; for all i and j\n",
    "    >- H<sub>1</sub> : $\\mu$<sub>i</sub> $\\ne$ $\\mu$<sub>j</sub> ; for some i and j\n",
    "    >- i, j = 1, 2, 3, 4, 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "00143bcf-588f-4bad-aeb3-e7e3c8006143",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "seam1 >> sample size = 7, mean = 1.66, var = 0.18\n",
      "seam2 >> sample size = 8, mean = 1.17, var = 0.14\n",
      "seam3 >> sample size = 9, mean = 1.46, var = 0.11\n",
      "seam4 >> sample size = 8, mean = 0.88, var = 0.12\n",
      "seam5 >> sample size = 10, mean = 0.88, var = 0.07\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data1  = np.array( [1.51, 1.92, 1.08, 2.04, 2.14, 1.76, 1.17] )\n",
    "group1 = np.full(data1.size, \"seam1\")\n",
    "\n",
    "data2  = np.array( [1.69, 0.64, 0.90, 1.41, 1.01, 0.84, 1.28, 1.59] )\n",
    "group2 = np.full(data2.size, \"seam2\")\n",
    "\n",
    "data3  = np.array( [1.56, 1.22, 1.32, 1.39, 1.33, 1.54, 1.04, 2.25, 1.49] )\n",
    "group3 = np.full(data3.size, \"seam3\")\n",
    "\n",
    "data4  = np.array( [1.30, 0.75, 1.26, 0.69, 0.62, 0.90, 1.20, 0.32] )\n",
    "group4 = np.full(data4.size, \"seam4\")\n",
    "\n",
    "data5  = np.array( [0.73, 0.80, 0.90, 1.24, 0.82, 0.72, 0.57, 1.18, 0.54, 1.30] )\n",
    "group5 = np.full(data5.size, \"seam5\")\n",
    "\n",
    "dataAll  = np.concatenate( (data1, data2, data3, data4, data5) )\n",
    "groupAll = np.concatenate( (group1, group2, group3, group4, group5) )\n",
    "\n",
    "###------------------------------------------------------------\n",
    "summarize(data1, \"seam1\")\n",
    "summarize(data2, \"seam2\")\n",
    "summarize(data3, \"seam3\")\n",
    "summarize(data4, \"seam4\")\n",
    "summarize(data5, \"seam5\")\n",
    "\n",
    "###------------------------------------------------------------\n",
    "fig = plt.figure( figsize = (8,4) ) \n",
    "qqPlot(231, data1, \"seam1\")\n",
    "qqPlot(232, data2, \"seam2\")\n",
    "qqPlot(233, data3, \"seam3\")\n",
    "qqPlot(234, data4, \"seam4\")\n",
    "qqPlot(235, data5, \"seam5\")\n",
    "fig.tight_layout()\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "54e11697-a961-46e1-b702-9c62630a3ccc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Levene statistic = 0.6949\n",
      "P-value          = 0.6003\n"
     ]
    }
   ],
   "source": [
    "result_vartest = levene(data1, data2, data3, data4, data5)\n",
    "print(\"Levene statistic = %.4f\" % result_vartest.statistic)\n",
    "print(\"P-value          = %.4f\" % result_vartest.pvalue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "08c54514-fd20-40c3-b140-56cdde65c2ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculated f = 8.09\n",
      "P-value      = 0.0001\n",
      "df           = (4.0, 37.0)\n",
      "\n",
      "----- All details -----\n",
      "statistic = 8.094810296811628\n",
      "pvalue = 8.566217180148503e-05\n",
      "df = (4.0, 37.0)\n",
      "df_num = 4.0\n",
      "df_denom = 37.0\n",
      "nobs_t = 42.0\n",
      "n_groups = 5\n",
      "means = [1.66 1.17 1.46 0.88 0.88]\n",
      "nobs = [ 7.  8.  9.  8. 10.]\n",
      "vars_ = [0.17523333 0.14354286 0.1146     0.12254286 0.07402222]\n",
      "use_var = equal\n",
      "welch_correction = True\n",
      "tuple = (8.094810296811628, 8.566217180148503e-05)\n",
      "\n",
      "----- Rejection region -----\n",
      "F threshold = 3.87\n"
     ]
    }
   ],
   "source": [
    "result = anova_oneway(dataAll, groupAll, use_var = 'equal')\n",
    "print(\"Calculated f = %.2f\" % result.statistic)\n",
    "print(\"P-value      = %.4f\" % result.pvalue)\n",
    "print(\"df           =\", result.df)\n",
    "\n",
    "print(\"\\n----- All details -----\")\n",
    "print(result)\n",
    "\n",
    "print(\"\\n----- Rejection region -----\")\n",
    "fthreshold = f.ppf(1-0.01, 4, 37)\n",
    "print(\"F threshold = %.2f\" % fthreshold)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4d720da-2b94-4f7f-b5fd-c294b3c7cb0a",
   "metadata": {},
   "source": [
    "<a name=\"ch8_studentized\"></a>\n",
    "\n",
    "## Studentized Range (Q) Distribution (scipy)\n",
    "- **[Manual: scipy.stats.studentized_range](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.studentized_range.html)**\n",
    "    > - For Q<sub>(df1)(df2)</sub>\n",
    "    > - df1 = K = number of groups\n",
    "    > - df2 = N-K\n",
    "    > - Default loc = 0\n",
    "    > - Default scale = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51517b11-1f60-4620-9b3b-a8309f764cb3",
   "metadata": {},
   "source": [
    "<a name=\"ch8_tukey\"></a>\n",
    "\n",
    "## Pairwise Tukey HSD (statsmodels)\n",
    "- **[Manual: statsmodels.stats.multicomp.pairwise_tukeyhsd](https://www.statsmodels.org/dev/generated/statsmodels.stats.multicomp.pairwise_tukeyhsd.html)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc9bbcc2-ebb6-4189-9cde-c2acc2f34a61",
   "metadata": {},
   "source": [
    "<a name=\"ch8_ex_compression_posthoc\"></a>\n",
    "\n",
    "### Example : compression strength, post-hoc test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e67e9687-c329-409c-96ee-779eecf0eadd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Multiple Comparison of Means - Tukey HSD, FWER=0.05 \n",
      "====================================================\n",
      "group1 group2 meandiff p-adj   lower   upper  reject\n",
      "----------------------------------------------------\n",
      " seam1  seam2    -0.49 0.0706 -1.0073  0.0273  False\n",
      " seam1  seam3     -0.2 0.7853 -0.7037  0.3037  False\n",
      " seam1  seam4    -0.78  0.001 -1.2973 -0.2627   True\n",
      " seam1  seam5    -0.78 0.0005 -1.2725 -0.2875   True\n",
      " seam2  seam3     0.29 0.4394 -0.1956  0.7756  False\n",
      " seam2  seam4    -0.29  0.468 -0.7897  0.2097  False\n",
      " seam2  seam5    -0.29 0.4151 -0.7641  0.1841  False\n",
      " seam3  seam4    -0.58 0.0125 -1.0656 -0.0944   True\n",
      " seam3  seam5    -0.58 0.0073 -1.0392 -0.1208   True\n",
      " seam4  seam5      0.0    1.0 -0.4741  0.4741  False\n",
      "----------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "### Re-load data to dataAll and groupAll fist\n",
    "\n",
    "result_pairwise = pairwise_tukeyhsd(dataAll, groupAll, 0.05)\n",
    "print(result_pairwise)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed3d6bbf-8079-4375-947a-bacd111cd8fd",
   "metadata": {},
   "source": [
    "**Note that** \n",
    "> - In our slide, means are sorted first --> meandiff can only be positive.\n",
    "> - But Python doesn't sort means before calculating meandiff --> meandiff can be both positive & negative.\n",
    "> - To avoid confusion, read only the last column from Python's result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cd5bf4a6-3a97-4dac-920c-ae45d7561a1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q threshold = 3.96\n"
     ]
    }
   ],
   "source": [
    "### Find Q threshold\n",
    "\n",
    "qthreshold = studentized_range.ppf(1-0.05, 4, 20)\n",
    "print(\"Q threshold = %.2f\" % qthreshold)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4430c94b-c6bd-4e28-956e-a8c682418a4a",
   "metadata": {},
   "source": [
    "<a name=\"ch8_ex_sulfur_posthoc\"></a>\n",
    "\n",
    "### Example : sulfur content, post-hoc test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "89b60477-28a5-4c14-b01b-c1652dd015f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "----- At alpha = 0.05 -----\n",
      "\n",
      "Multiple Comparison of Means - Tukey HSD, FWER=0.05 \n",
      "====================================================\n",
      "group1 group2 meandiff p-adj   lower   upper  reject\n",
      "----------------------------------------------------\n",
      " seam1  seam2    -0.49 0.0706 -1.0073  0.0273  False\n",
      " seam1  seam3     -0.2 0.7853 -0.7037  0.3037  False\n",
      " seam1  seam4    -0.78  0.001 -1.2973 -0.2627   True\n",
      " seam1  seam5    -0.78 0.0005 -1.2725 -0.2875   True\n",
      " seam2  seam3     0.29 0.4394 -0.1956  0.7756  False\n",
      " seam2  seam4    -0.29  0.468 -0.7897  0.2097  False\n",
      " seam2  seam5    -0.29 0.4151 -0.7641  0.1841  False\n",
      " seam3  seam4    -0.58 0.0125 -1.0656 -0.0944   True\n",
      " seam3  seam5    -0.58 0.0073 -1.0392 -0.1208   True\n",
      " seam4  seam5      0.0    1.0 -0.4741  0.4741  False\n",
      "----------------------------------------------------\n",
      "Q threshold = 4.05\n"
     ]
    }
   ],
   "source": [
    "### Re-load data to dataAll and groupAll fist\n",
    "\n",
    "print(\"\\n----- At alpha = 0.05 -----\\n\")\n",
    "result_pairwise = pairwise_tukeyhsd(dataAll, groupAll, 0.05)\n",
    "print(result_pairwise)\n",
    "\n",
    "qthreshold = studentized_range.ppf(1-0.05, 5, 37)\n",
    "print(\"Q threshold = %.2f\" % qthreshold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8dad108c-8563-4b16-9b51-ed2a489c7fb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "----- At alpha = 0.01 -----\n",
      "\n",
      "Multiple Comparison of Means - Tukey HSD, FWER=0.01 \n",
      "====================================================\n",
      "group1 group2 meandiff p-adj   lower   upper  reject\n",
      "----------------------------------------------------\n",
      " seam1  seam2    -0.49 0.0706 -1.1227  0.1427  False\n",
      " seam1  seam3     -0.2 0.7853  -0.816   0.416  False\n",
      " seam1  seam4    -0.78  0.001 -1.4127 -0.1473   True\n",
      " seam1  seam5    -0.78 0.0005 -1.3824 -0.1776   True\n",
      " seam2  seam3     0.29 0.4394  -0.304   0.884  False\n",
      " seam2  seam4    -0.29  0.468 -0.9012  0.3212  False\n",
      " seam2  seam5    -0.29 0.4151 -0.8699  0.2899  False\n",
      " seam3  seam4    -0.58 0.0125  -1.174   0.014  False\n",
      " seam3  seam5    -0.58 0.0073 -1.1417 -0.0183   True\n",
      " seam4  seam5      0.0    1.0 -0.5799  0.5799  False\n",
      "----------------------------------------------------\n",
      "Q threshold = 4.96\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n----- At alpha = 0.01 -----\\n\")\n",
    "result_pairwise = pairwise_tukeyhsd(dataAll, groupAll, 0.01)\n",
    "print(result_pairwise)\n",
    "\n",
    "qthreshold = studentized_range.ppf(1-0.01, 5, 37)\n",
    "print(\"Q threshold = %.2f\" % qthreshold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "de67b626-dde0-425f-b789-09f1ac94114a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F-statistic: 3.749330354598611\n",
      "P-value: 0.02755166539699444\n",
      "SST (Total Sum of Squares): 65.27333333333334\n",
      "SSTr (Sum of Squares Between Groups): 23.4957142857143\n",
      "SSE (Sum of Squares Within Groups): 41.77761904761904\n",
      "MSTr (Mean Square Between Groups): 7.831904761904767\n",
      "MSE (Mean Square Error): 2.088880952380952\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Data for each brand\n",
    "data1 = np.array([7.9, 6.2, 6.6, 8.6, 8.9, 10.1, 9.6])\n",
    "data2 = np.array([5.7, 7.5, 9.8, 6.1, 8.4])\n",
    "data3 = np.array([6.8, 7.5, 5.0, 7.4, 5.3, 6.1])\n",
    "data4 = np.array([6.4, 7.1, 7.9, 4.5, 5.0, 4.0])\n",
    "\n",
    "def perform_anova(data1, data2, data3, data4):\n",
    "    data = np.concatenate([data1, data2, data3, data4])\n",
    "    groups = np.array(['Brand 1']*len(data1) + ['Brand 2']*len(data2) + ['Brand 3']*len(data3) + ['Brand 4']*len(data4))\n",
    "    \n",
    "    grand_mean = np.mean(data)\n",
    "    sst = np.sum((data - grand_mean)**2)\n",
    "    sstr = sum(np.sum(groups == group) * (np.mean(data[groups == group]) - grand_mean)**2 for group in np.unique(groups))\n",
    "    sse = sst - sstr\n",
    "    df_between = len(np.unique(groups)) - 1\n",
    "    df_within = len(data) - len(np.unique(groups))\n",
    "    mstr = sstr / df_between\n",
    "    mse = sse / df_within\n",
    "    f_stat, p_value = stats.f_oneway(data1, data2, data3, data4)\n",
    "    return f_stat, p_value, sst, sstr, sse, mstr, mse\n",
    "\n",
    "# Calculating ANOVA\n",
    "anova_results = perform_anova(data1, data2, data3, data4)\n",
    "print(\"F-statistic:\", anova_results[0])\n",
    "print(\"P-value:\", anova_results[1])\n",
    "print(\"SST (Total Sum of Squares):\", anova_results[2])\n",
    "print(\"SSTr (Sum of Squares Between Groups):\", anova_results[3])\n",
    "print(\"SSE (Sum of Squares Within Groups):\", anova_results[4])\n",
    "print(\"MSTr (Mean Square Between Groups):\", anova_results[5])\n",
    "print(\"MSE (Mean Square Error):\", anova_results[6])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8928ce27-7dcd-4fef-9020-f95b31c8c140",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
