{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d2845d01-38dc-4325-92a8-17b79b97ec17",
   "metadata": {},
   "source": [
    "# EGCI 305: Chapter 9 (Simple Linear Regression)\n",
    "\n",
    "Outline\n",
    "> 1. [Packages](#ch9_packages)\n",
    "\n",
    "> 2. [Linear regression](#ch9_linear_regression)\n",
    "   \n",
    "> 3. [Example: biodiesel fuel](#ch9_ex_biodiesel)\n",
    ">    - [Fitting model](#ch9_ex_biodiesel_fitting)\n",
    ">    - [Making new prediction](#ch9_ex_biodiesel_predict)\n",
    ">    - [Evaluating model](#ch9_ex_biodiesel_evaluate)\n",
    "\n",
    "> 4. [Example: moped speed](#ch9_ex_moped)\n",
    ">    - [Fitting model](#ch9_ex_moped_fitting)\n",
    ">    - [Evaluating model](#ch9_ex_moped_evaluate)\n",
    "\n",
    "Functions\n",
    "> - [allSums](#ch9_func_allSums)\n",
    "> - [predict](#ch9_func_predict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a564613e-f234-437f-acd0-381e074f9d4d",
   "metadata": {},
   "source": [
    "<a name=\"ch9_packages\"></a>\n",
    "\n",
    "## Packages\n",
    "> - **numpy** -- to work with array manipulation\n",
    "> - **matplotlib** -- to work with visualization (backend)\n",
    "> - **seaborn** -- to work with high-level visualization\n",
    "> - **math** -- to work with calculation such as sqrt (if not using sympy)\n",
    "> - **scipy.stats** -- to work with stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84400489-2276-49b0-a621-e5244e731154",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "print(\"Numpy version =\", np.version.version)\n",
    "print(\"Seaborn version =\", sns.__version__)\n",
    "\n",
    "import math\n",
    "import scipy\n",
    "print(\"Scipy version =\", scipy.__version__)\n",
    "\n",
    "from scipy import stats\n",
    "from scipy.stats import linregress      # linear regression\n",
    "from scipy.stats import t               # T distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be333fba-2fe9-45e9-94cf-a0aea9ec3b03",
   "metadata": {},
   "source": [
    "<a name=\"ch9_linear_regression\"></a>\n",
    "\n",
    "## Linear Regression (scipy)\n",
    "- **[Manual: scipy.stats.linregress](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html)**\n",
    "- scipy's linregress is very simple & outputs many stat values for stat purpose\n",
    "- For machine learning purpose --> try scikit-learn's LinearRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b35b5b6b-ff79-49e2-83b8-af198096fca2",
   "metadata": {},
   "source": [
    "<a name=\"ch9_func_allSums\"></a>\n",
    "### Function : allSums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42292710-a7da-4de3-8698-4a3e814c37de",
   "metadata": {},
   "outputs": [],
   "source": [
    "def allSums(x, y):\n",
    "    sum_x = np.sum(x)\n",
    "    sum_y = np.sum(y)\n",
    "    \n",
    "    xx = x * x\n",
    "    xy = x * y\n",
    "    yy = y * y\n",
    "    sum_xx = np.sum(xx)\n",
    "    sum_xy = np.sum(xy)\n",
    "    sum_yy = np.sum(yy)\n",
    "\n",
    "    print(\"Sum x  = %.2f\" % sum_x)\n",
    "    print(\"Sum y  = %.2f\" % sum_y)\n",
    "    print(\"Sum xx = %.2f\" % sum_xx)\n",
    "    print(\"Sum xy = %.2f\" % sum_xy)\n",
    "    print(\"Sum yy = %.2f\" % sum_yy)\n",
    "\n",
    "    return sum_x, sum_y, sum_xx, sum_xy, sum_yy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13e3e66c-b519-4d6b-bcad-46fbba569425",
   "metadata": {},
   "source": [
    "<a name=\"ch9_func_predict\"></a>\n",
    "### Function : predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c06153c-8fc3-485a-911b-89bbf7d92eb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(b0, b1, x):\n",
    "    pred = b0 + b1*x\n",
    "    return pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f729239-cd4c-4e80-96cd-cee09b34172c",
   "metadata": {},
   "source": [
    "<a name=\"ch9_ex_biodiesel\"></a>\n",
    "\n",
    "## Example : biodiesel fuel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de8456be-6af9-46d8-8f52-e82556c1fbed",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array( [132.0, 129.0, 120.0, 113.2, 105.0, 92.0, 84.0, 83.2, 88.4, 59.0, \n",
    "                80.0,  81.5,  71.0,  69.2] )\n",
    "\n",
    "y = np.array( [ 46.0,  48.0,  51.0,  52.1,  54.0, 52.0, 59.0, 58.7, 61.6, 64.0, \n",
    "                61.4,  54.6,  58.8,  58.0] )\n",
    "\n",
    "sum_x, sum_y, sum_xx, sum_xy, sum_yy = allSums(x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a457803-60a7-41c4-afbc-f9eed8e616ea",
   "metadata": {},
   "source": [
    "<a name=\"ch9_ex_biodiesel_fitting\"></a>\n",
    "\n",
    "#### Fitting model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d938eeec-d742-46d6-8dfa-2fd8ece70d94",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = linregress(x, y)\n",
    "b0 = result.intercept\n",
    "b1 = result.slope\n",
    "print(\"Intercept (b0) = %.4f\" % b0)\n",
    "print(\"Slope     (b1) = %.4f\" % b1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8daff3e8-bbbd-451c-bc04-e7bf6c8b15ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure( figsize = (6,4) )\n",
    "\n",
    "plt.plot(x, y, 'o', label=\"raw data\")\n",
    "plt.plot(x, b0 + b1*x, color='r', label=\"fitted line\")\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"Iodine value\")\n",
    "plt.ylabel(\"Cetane number\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb201a86-b657-46f3-936c-0613cd360e7e",
   "metadata": {},
   "source": [
    "<a name=\"ch9_ex_biodiesel_predict\"></a>\n",
    "\n",
    "#### Making new prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d61868e-312e-4224-b6ae-b3af684779ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "newx = 100\n",
    "newy = predict(b0, b1, newx)\n",
    "print(\"Given x = %.2f, predicted y (true average of y) = %.2f\" % (newx, newy))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11867876-0c7b-45f9-81b3-4b7119db2c06",
   "metadata": {},
   "source": [
    "<a name=\"ch9_ex_biodiesel_evaluate\"></a>\n",
    "\n",
    "#### Evaluating model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95213808-67a2-4eba-be53-cc18ad0a1d84",
   "metadata": {},
   "outputs": [],
   "source": [
    "SSE = sum_yy - b0*sum_y - b1*sum_xy\n",
    "s2  = SSE / (x.size-2)\n",
    "\n",
    "print(\"Regression SSE = %.4f\" % SSE)\n",
    "print(\"Regression s2  = %.4f\" % s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "298f899c-8cff-49da-86a9-6bee559a25fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "r = result.rvalue\n",
    "print(\"Correlation (r)            = %.4f\" % r)\n",
    "print(\"Coef of determination (r2) = %.4f\" % r**2)\n",
    "\n",
    "pvalue1 = result.pvalue\n",
    "print(\"P-value for slope testing  = %.6f\" % pvalue1, \"\\n\")\n",
    "\n",
    "pvalue2 = 2 * t.sf(6.73, 12)\n",
    "print(\"P-value from manual calculation = %.6f\" % pvalue2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c726b557-f266-4cbc-961c-0a9fb216e45c",
   "metadata": {},
   "source": [
    "<a name=\"ch9_ex_moped\"></a>\n",
    "\n",
    "## Example : moped speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0045c6b-ea41-4015-a178-63ab178f60f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array( [42.2, 42.6, 43.3, 43.5, 43.7, 44.1, 44.9, 45.3, 45.7, \n",
    "               45.7, 45.9, 46.0, 46.2, 46.2, 46.8, 46.8, 47.1, 47.2] )\n",
    "\n",
    "y = np.array( [44, 44, 44, 45, 45, 46, 46, 46, 47, \n",
    "               48, 48, 48, 47, 48, 48, 49, 49, 49] )\n",
    "\n",
    "sum_x, sum_y, sum_xx, sum_xy, sum_yy = allSums(x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f82b861-67ae-449e-8459-cab37b7cdfc3",
   "metadata": {},
   "source": [
    "<a name=\"ch9_ex_moped_fitting\"></a>\n",
    "\n",
    "#### Fitting model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e935cda-4ad7-43ac-be67-26b815662024",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = linregress(x, y)\n",
    "b0 = result.intercept\n",
    "b1 = result.slope\n",
    "print(\"Intercept (b0) = %.4f\" % b0)\n",
    "print(\"Slope     (b1) = %.4f\" % b1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e80af497-3362-49e7-b598-f3c6bcc6061f",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure( figsize = (6,4) )\n",
    "\n",
    "plt.plot(x, y, 'o', label=\"raw data\")\n",
    "plt.plot(x, b0 + b1*x, color='r', label=\"fitted line\")\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"Track speed\")\n",
    "plt.ylabel(\"Rolling-test speed\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e493295b-b2b7-46c5-a790-538217e9ddbb",
   "metadata": {},
   "source": [
    "<a name=\"ch9_ex_moped_evaluate\"></a>\n",
    "\n",
    "#### Evaluating model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4959daf5-c749-44a4-9003-69418011aa3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "r = result.rvalue\n",
    "print(\"Correlation (r)            = %.4f\" % r)\n",
    "print(\"Coef of determination (r2) = %.4f\" % r**2)\n",
    "\n",
    "pvalue1 = result.pvalue\n",
    "print(\"P-value for slope testing  = %.6f\" % pvalue1, \"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e4fbb40-761e-46ce-b756-0e2b996c4577",
   "metadata": {},
   "source": [
    "**Note that** \n",
    "> - Some decimal digits are different from the results given in slides.\n",
    "> - This is due to floating-point rounding in manual calculation (in slides)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a5b8e42-f0bd-44af-8570-e2fddf51c580",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
